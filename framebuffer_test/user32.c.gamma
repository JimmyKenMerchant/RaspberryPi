/**
 * user32.c
 *
 * Author: Kenta Ishii
 * License: MIT
 * License URL: https://opensource.org/licenses/MIT
 *
 */

#include "system32.h"
#include "system32.c"

int32 _user_start()
{

	FB32_X_CARET = 0;
	FB32_Y_CARET = 200;
	String string_num = "9999999999999999\0";
	String string_num0 = "2222222222222222\0";
	String string_num1 = "0b1110101";
	String string_num2 = "-1234.567890\0";
	String string_num3 = "-222.2222E-3\0"; // float32's Expected Value is Untill 7th Decimal Digit on 10 Base (IEEE754)
	uint32 number1 = 0xFFFFFFFF;
	uint32 number2 = 0xFFFFFFFF;

	print32_set_caret( print32_number( number1, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_number( number2, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	uint64 number1_deci = cvt32_hexa_to_deci( number1 );
	uint64 number2_deci = cvt32_hexa_to_deci( number2 );

	print32_set_caret( print32_number_double( number1_deci, FB32_X_CARET, FB32_Y_CARET, 16 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_number_double( number2_deci, FB32_X_CARET, FB32_Y_CARET, 16 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	uint32 number1_hexa = cvt32_deci_to_hexa( number1_deci );
	uint32 number2_hexa = cvt32_deci_to_hexa( number2_deci );

	print32_set_caret( print32_number( number1_hexa, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_number( number2_hexa, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	uint64 number3_deci = 0x0000000041234123;
	uint64 number4_deci = 0x0000000000009999;

	uint64 result1 = bcd32_deci_mul64( number3_deci, number4_deci );
	print32_set_caret( print32_number_double( result1, FB32_X_CARET, FB32_Y_CARET, 16 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	number3_deci = 0x9999999999999999;
	number4_deci = 0x0000000000000003;

	uint64 result2 = bcd32_deci_div64( number3_deci, number4_deci );
	print32_set_caret( print32_number_double( result2, FB32_X_CARET, FB32_Y_CARET, 16 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	uint64 result3 = bcd32_deci_rem64( number3_deci, number4_deci );
	print32_set_caret( print32_number_double( result3, FB32_X_CARET, FB32_Y_CARET, 16 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	uint64 number0 = cvt32_string_to_deci( string_num0, str32_strlen( string_num0 ) );
	print32_set_caret( print32_number_double( number0, FB32_X_CARET, FB32_Y_CARET, 16 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	int32 number5 = cvt32_string_to_int32( string_num1, str32_strlen( string_num1 ) );
	print32_set_caret( print32_number( (uint32)number5, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	int32 number6 = cvt32_string_to_int32( string_num2, str32_strlen( string_num2 ) );
	print32_set_caret( print32_number( (uint32)number6, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	String number5_str = cvt32_int32_to_string_bin( number5, 1, 1 );
	String number6_str = cvt32_int32_to_string_deci( number6, 0, 1 );

	print32_set_caret( print32_string( number5_str, FB32_X_CARET, FB32_Y_CARET, str32_strlen( number5_str ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_string( number6_str, FB32_X_CARET, FB32_Y_CARET, str32_strlen( number6_str ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	heap32_mfree( (obj)number5_str );
	heap32_mfree( (obj)number6_str );

	float32 number7 = cvt32_string_to_float32( string_num3, str32_strlen( string_num3 ) );
	print32_set_caret( print32_number( vfp32_f32tos32( number7 ), FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	String number7_str = cvt32_float32_to_string( number7, 0, 20, 0 );
	print32_set_caret( print32_string( number7_str, FB32_X_CARET, FB32_Y_CARET, str32_strlen( number7_str ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	heap32_mfree( (obj)number7_str );

	float32 number_ln = math32_ln( 4.0 );
	String number_ln_str = cvt32_float32_to_string( number_ln, 1, 20, 0 );
	print32_set_caret( print32_string( number_ln_str, FB32_X_CARET, FB32_Y_CARET, str32_strlen( number_ln_str ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	heap32_mfree( (obj)number_ln_str );

	float32 number_log = math32_log( 4.0 );
	String number_log_str = cvt32_float32_to_string( number_log, 1, 20, 0 );
	print32_set_caret( print32_string( number_log_str, FB32_X_CARET, FB32_Y_CARET, str32_strlen( number_log_str ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	heap32_mfree( (obj)number_log_str );

	String answer_str = bcd32_badd( string_num, str32_strlen( string_num ), string_num0, str32_strlen( string_num0 ) );
	print32_set_caret( print32_string( answer_str, FB32_X_CARET, FB32_Y_CARET, str32_strlen( answer_str ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	heap32_mfree( (obj)answer_str );

	uint32 answer_ufixpoint = vfp32_f32toufix32( 4.125, 16 );
	print32_set_caret( print32_number( answer_ufixpoint, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	int32 answer_sfixpoint = vfp32_f32tosfix32( 4.125, 16 );
	print32_set_caret( print32_number( answer_sfixpoint, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	answer_sfixpoint = vfp32_f32tosfix32( -1.75, 8 );
	print32_set_caret( print32_number( answer_sfixpoint, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	uint32 answer_leapyear = clk32_check_leapyear( 2001 );
	print32_set_caret( print32_number( answer_leapyear, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	uint32 answer_week = clk32_check_week( 2017, 12, 19 );
	print32_set_caret( print32_number( answer_week, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	_calender_init( 2018, 12, 31 );
	_clock_init( 23, 59, 50, 0 );
	_correct_utc( -9 );
	_correct_utc( -1 );
	while(1) {
		_get_time();
		print32_number( CLK32_YEAR, FB32_X_CARET, FB32_Y_CARET, 8 );
		print32_number( CLK32_YEARDAY, FB32_X_CARET, FB32_Y_CARET + 12, 8 );
		print32_number( CLK32_MONTH, FB32_X_CARET, FB32_Y_CARET + 24, 8 );
		print32_number( CLK32_WEEK, FB32_X_CARET, FB32_Y_CARET + 36, 8 );
		print32_number( CLK32_MONTHDAY, FB32_X_CARET, FB32_Y_CARET + 48, 8 );
		print32_number( CLK32_HOUR, FB32_X_CARET, FB32_Y_CARET + 60, 8 );
		print32_number( CLK32_MINUTE, FB32_X_CARET, FB32_Y_CARET + 72, 8 );
		print32_number( CLK32_SECOND, FB32_X_CARET, FB32_Y_CARET + 84, 8 );
		print32_number( CLK32_USECOND, FB32_X_CARET, FB32_Y_CARET + 96, 8 );
		print32_number( CLK32_UTC, FB32_X_CARET, FB32_Y_CARET + 108, 8 );
		_sleep( 1000000 );
	}

	return EXIT_SUCCESS;
}
