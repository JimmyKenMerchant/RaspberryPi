/**
 * user32.c
 *
 * Author: Kenta Ishii
 * License: MIT
 * License URL: https://opensource.org/licenses/MIT
 *
 */

#include "system32.h"
#include "system32.c"

void _user_start()
{

	FB32_X_CARET = 0;
	FB32_Y_CARET = 200;
	String newline = "\n\0";
	String string_num0 = "123456781.2345678\0";
	String string_num1 = "0xFF\0";
	String string_num2 = "-1234.567890\0";
	String string_num3 = "-222.2222E-3\0"; // float32's Expected Value is Untill 7th Decimal Digit on 10 Base (IEEE754)
	uint32 color = COLOR32_WHITE;
	uint32 back_color = COLOR32_BLACK;
	uint32 number1 = 0xFFFFFFFF;
	uint32 number2 = 0xFFFFFFFF;

	print32_set_caret( print32_number( number1, FB32_X_CARET, FB32_Y_CARET, color, back_color, 8, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_number( number2, FB32_X_CARET, FB32_Y_CARET, color, back_color, 8, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	uint64 number1_deci = deci32_hexa_to_deci( number1 );
	uint64 number2_deci = deci32_hexa_to_deci( number2 );

	print32_set_caret( print32_number_double( number1_deci, FB32_X_CARET, FB32_Y_CARET, color, back_color, 16, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_number_double( number2_deci, FB32_X_CARET, FB32_Y_CARET, color, back_color, 16, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	uint32 number1_hexa = deci32_deci_to_hexa( number1_deci );
	uint32 number2_hexa = deci32_deci_to_hexa( number2_deci );

	print32_set_caret( print32_number( number1_hexa, FB32_X_CARET, FB32_Y_CARET, color, back_color, 8, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_number( number2_hexa, FB32_X_CARET, FB32_Y_CARET, color, back_color, 8, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	uint64 number3_deci = 0x0000000041234123;
	uint64 number4_deci = 0x0000000000009999;

	uint64 result1 = deci32_deci_mul64( number3_deci, number4_deci );
	print32_set_caret( print32_number_double( result1, FB32_X_CARET, FB32_Y_CARET, color, back_color, 16, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	number3_deci = 0x9999999999999999;
	number4_deci = 0x0000000000000003;

	uint64 result2 = deci32_deci_div64( number3_deci, number4_deci );
	print32_set_caret( print32_number_double( result2, FB32_X_CARET, FB32_Y_CARET, color, back_color, 16, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	uint64 result3 = deci32_deci_rem64( number3_deci, number4_deci );
	print32_set_caret( print32_number_double( result3, FB32_X_CARET, FB32_Y_CARET, color, back_color, 16, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	uint64 number0 = deci32_string_to_deci( string_num0, print32_strlen( string_num0 ) );
	print32_set_caret( print32_number_double( number0, FB32_X_CARET, FB32_Y_CARET, color, back_color, 16, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	int32 number5 = deci32_string_to_int32( string_num1, print32_strlen( string_num1 ), 0 );
	print32_set_caret( print32_number( (uint32)number5, FB32_X_CARET, FB32_Y_CARET, color, back_color, 8, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	int32 number6 = deci32_string_to_int32( string_num2, print32_strlen( string_num2 ), 1 );
	print32_set_caret( print32_number( (uint32)number6, FB32_X_CARET, FB32_Y_CARET, color, back_color, 8, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	String number5_str = deci32_int32_to_string_deci( number5, 0, 1 );
	String number6_str = deci32_int32_to_string_deci( number6, 0, 1 );

	print32_set_caret( print32_string( number5_str, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( number5_str ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( number6_str, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( number6_str ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	heap32_mfree( (obj)number5_str );
	heap32_mfree( (obj)number6_str );

	float32 number7 = deci32_string_to_float32( string_num3, print32_strlen( string_num3 ) );
	print32_set_caret( print32_number( vfp32_f32tos32( number7 ), FB32_X_CARET, FB32_Y_CARET, color, back_color, 8, 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	String number7_str = deci32_float32_to_string( number7, 0, 20, 0 );
	print32_set_caret( print32_string( number7_str, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( number7_str ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	heap32_mfree( (obj)number7_str );

	float32 number_ln = math32_ln( 4.0 );
	String number_ln_str = deci32_float32_to_string( number_ln, 1, 20, 0 );
	print32_set_caret( print32_string( number_ln_str, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( number_ln_str ), 8, 12, FONT_MONO_12PX_ASCII ) );
	print32_set_caret( print32_string( newline, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( newline ), 8, 12, FONT_MONO_12PX_ASCII ) );

	heap32_mfree( (obj)number_ln_str );

	float32 number_log = math32_log( 4.0 );
	String number_log_str = deci32_float32_to_string( number_log, 1, 20, 0 );
	print32_set_caret( print32_string( number_log_str, FB32_X_CARET, FB32_Y_CARET, color, back_color, print32_strlen( number_log_str ), 8, 12, FONT_MONO_12PX_ASCII ) );

	heap32_mfree( (obj)number_log_str );

	while(1) {
		_sleep( 100000 );
	}
}