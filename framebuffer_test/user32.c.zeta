/**
 * user32.c
 *
 * Author: Kenta Ishii
 * License: MIT
 * License URL: https://opensource.org/licenses/MIT
 *
 */

#include "system32.h"
#include "system32.c"

int32 _user_start()
{
	String string_arr1 = "100,100,"\
			     "200,200,"\
			     "100,200,"\
			     "20,150\0";

	String string_arr2 = "-0.5,0.5,0.5,"\
			     "-0.5,-0.5,0.5,"\
			     "0.5,-0.5,0.5,"\
			     "0.5,0.5,0.5,"\
			     "-0.5,0.5,-0.5,"\
			     "-0.5,0.5,0.5,"\
			     "0.5,0.5,0.5,"\
			     "0.5,0.5,-0.5,"\
			     "0.5,0.5,0.5,"\
			     "0.5,-0.5,0.5,"\
			     "0.5,-0.5,-0.5,"\
			     "0.5,0.5,-0.5\0";

	String string_arr3 = "1.0,1.0,1.0\0";

	uint32 result;

	obj arr1 = cvt32_string_to_intarray( string_arr1, str32_strlen( string_arr1 ), 2 );
	obj arr2 = cvt32_string_to_farray( string_arr2, str32_strlen( string_arr2 ) );
	obj arr3 = cvt32_string_to_farray( string_arr3, str32_strlen( string_arr3 ) );
	obj mat1 = mtx32_identity( 4 );
	obj mat2 = mtx32_rotatex3d( 60.0 );
	obj mat3 = mtx32_rotatey3d( 60.0 );
	obj mat4 = mtx32_rotatez3d( 60.0 );
	obj versor;
	obj mat_versor;

	//print32_debug_hexa( mat1, 100, 100, 64 );

	//geo32_polygon( COLOR32_YELLOW, arr1, 4, 1, 1 );
	//result = geo32_wire3d( COLOR32_CYAN, arr2, 4, 12, mat1, GEO32_WIRE3D_BOTH );
	//result = geo32_wire3d( COLOR32_RED, arr2, 4, 12, mat2, GEO32_WIRE3D_BOTH );
	//result = geo32_wire3d( COLOR32_BLUE, arr2, 4, 12, mat3, GEO32_WIRE3D_BOTH );
	//result = geo32_wire3d( COLOR32_GREEN, arr2, 4, 12, mat4, GEO32_WIRE3D_BOTH );
	//print32_debug( result, 0, 0 );

	float32 angle = 39.0;

	while(True) {
		fb32_clear_color( COLOR32_NAVYBLUE );
		versor = mtx32_versor( angle, arr3 );
		mat_versor = mtx32_versortomatrix( versor );
		geo32_wire3d( COLOR32_GREEN, arr2, 4, 12, mat_versor, GEO32_WIRE3D_CCW );
		print32_debug( versor, 0, 0 );
		print32_debug( mat_versor, 0, 50 );
		heap32_mfree( versor );
		heap32_mfree( mat_versor );
		angle = vfp32_fadd( angle, 2.0 );
		_sleep( 200000 );
	}

	heap32_mfree( arr1 );
	heap32_mfree( arr2 );
	heap32_mfree( mat1 );
	heap32_mfree( mat2 );
	heap32_mfree( mat3 );
	heap32_mfree( mat4 );

	return EXIT_SUCCESS;
}
