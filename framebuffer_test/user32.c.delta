/**
 * user32.c
 *
 * Author: Kenta Ishii
 * License: MIT
 * License URL: https://opensource.org/licenses/MIT
 *
 */

#include "system32.h"
#include "system32.c"

int32 _user_start()
{
	String string_arr0 = "-5.0,-2.0,-1.0,0.0,1.0,2.0,5.0\0";
	String string_arr10 = "0.0,2.0,4.0,5.0,6.0,8.0,10.0\0";

	obj arr0 = cvt32_string_to_farray( string_arr0, str32_strlen( string_arr0 ) );
	String dup_string_arr0 = cvt32_farray_to_string( arr0, 1, 8, 0 );
	print32_set_caret( print32_string( dup_string_arr0, FB32_X_CARET, FB32_Y_CARET, str32_strlen( dup_string_arr0 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	obj arr10 = cvt32_string_to_farray( string_arr10, str32_strlen( string_arr10 ) );
	String dup_string_arr10 = cvt32_farray_to_string( arr10, 1, 8, 0 );
	print32_set_caret( print32_string( dup_string_arr10, FB32_X_CARET, FB32_Y_CARET, str32_strlen( dup_string_arr10 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	obj arr1 = stat32_order( arr0, heap32_mcount( arr0 ) / 4, 0 );

	String dup_string_arr1 = cvt32_farray_to_string( arr1, 1, 8, 0 );
	print32_set_caret( print32_string( dup_string_arr1, FB32_X_CARET, FB32_Y_CARET, str32_strlen( dup_string_arr1 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 mean1 = stat32_mean( arr1, heap32_mcount( arr1 ) / 4 );
	String string_mean1 = cvt32_float32_to_string( mean1, 1, 8, 0 );
	print32_set_caret( print32_string( string_mean1, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_mean1 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 median1 = stat32_median( arr1, heap32_mcount( arr1 ) / 4 );
	String string_median1 = cvt32_float32_to_string( median1, 1, 8, 0 );
	print32_set_caret( print32_string( string_median1, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_mean1 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 mode1 = stat32_mode( arr1, heap32_mcount( arr1 ) / 4 );
	String string_mode1 = cvt32_float32_to_string( mode1, 1, 8, 0 );
	print32_set_caret( print32_string( string_mode1, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_mean1 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 max0 = stat32_max( arr0, heap32_mcount( arr0 ) / 4 );
	String string_max0 = cvt32_float32_to_string( max0, 1, 8, 0 );
	print32_set_caret( print32_string( string_max0, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_max0 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 min0 = stat32_min( arr0, heap32_mcount( arr0 ) / 4 );
	String string_min0 = cvt32_float32_to_string( min0, 1, 8, 0 );
	print32_set_caret( print32_string( string_min0, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_min0 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	obj arr0_deviation = stat32_deviation( arr0, heap32_mcount( arr0 ) / 4, mean1, True );
	String string_arr0_deviation = cvt32_farray_to_string( arr0_deviation, 1, 8, 0 );
	print32_set_caret( print32_string( string_arr0_deviation, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_arr0_deviation ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	obj arr10_deviation = stat32_deviation( arr10, heap32_mcount( arr10 ) / 4, mean1, True );
	String string_arr10_deviation = cvt32_farray_to_string( arr10_deviation, 1, 8, 0 );
	print32_set_caret( print32_string( string_arr10_deviation, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_arr10_deviation ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 variance0 = stat32_variance( arr0, heap32_mcount( arr0 ) / 4, true );
	String string_variance0 = cvt32_float32_to_string( variance0, 1, 8, 0 );
	print32_set_caret( print32_string( string_variance0, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_variance0 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 sd0 = stat32_standard_deviation( arr0, heap32_mcount( arr0 ) / 4, true );
	String string_sd0 = cvt32_float32_to_string( sd0, 1, 8, 0 );
	print32_set_caret( print32_string( string_sd0, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_sd0 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 sd10 = stat32_standard_deviation( arr10, heap32_mcount( arr10 ) / 4, true );
	String string_sd10 = cvt32_float32_to_string( sd10, 1, 8, 0 );
	print32_set_caret( print32_string( string_sd10, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_sd10 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 covariance_0_10 = stat32_covariance( arr0_deviation, arr10_deviation, heap32_mcount( arr0_deviation ) / 4, true );
	String string_covariance_0_10 = cvt32_float32_to_string( covariance_0_10, 1, 8, 0 );
	print32_set_caret( print32_string( string_covariance_0_10, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_covariance_0_10 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	float32 correlation_0_10 = stat32_correlation_pearson( sd0, sd10, covariance_0_10 );
	String string_correlation_0_10 = cvt32_float32_to_string( correlation_0_10, 1, 8, 0 );
	print32_set_caret( print32_string( string_correlation_0_10, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_correlation_0_10 ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	uint32 factorial = vfp64_f64tou32( math64_factorial( 8 ) );
	uint32 double_factorial = vfp64_f64tou32( math64_double_factorial( 8 ) );
	uint32 gamma_integer = vfp64_f64tou32( math64_gamma_integer( 8 ) );

	float32 gamma_halfinteger = vfp64_f64tof32( math64_gamma_halfinteger( 20 ) );
	String string_gamma_halfinteger = cvt32_float32_to_string( gamma_halfinteger, 1, 8, 0 );
	float32 gamma_halfinteger_negative = vfp64_f64tof32( math64_gamma_halfinteger( 21 ) );
	String string_gamma_halfinteger_negative = cvt32_float32_to_string( gamma_halfinteger_negative, 1, 8, 0 );

	float32 hypergeometric_halfinteger = vfp64_f64tof32( math64_hypergeometric_halfinteger( 1, 40, 3, -0.1, 80 ) );
	String string_hypergeometric_halfinteger = cvt32_float32_to_string( hypergeometric_halfinteger, 1, 8, 0 );

	float32 cdf_t = stat32_cdf_t( 3.373, 120, 60 );
	String string_cdf_t = cvt32_float32_to_string( cdf_t, 1, 8, 0 );

	float32 standard_error = stat32_standard_error( sd0, heap32_mcount( arr0 ) / 4 );
	String string_standard_error = cvt32_float32_to_string( standard_error, 1, 8, 0 );

	print32_set_caret( print32_number( factorial, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_number( double_factorial, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_number( gamma_integer, FB32_X_CARET, FB32_Y_CARET, 8 ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_string( string_gamma_halfinteger, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_gamma_halfinteger ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_string( string_gamma_halfinteger_negative, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_gamma_halfinteger_negative ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_string( string_hypergeometric_halfinteger, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_hypergeometric_halfinteger ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_string( string_cdf_t, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_cdf_t ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
	print32_set_caret( print32_string( string_standard_error, FB32_X_CARET, FB32_Y_CARET, str32_strlen( string_standard_error ) ) );
	print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );

	heap32_mfree( arr0 );
	heap32_mfree( arr1 );
	heap32_mfree( arr0_deviation );
	heap32_mfree( arr10 );
	heap32_mfree( arr10_deviation );
	heap32_mfree( (obj)dup_string_arr0 );
	heap32_mfree( (obj)dup_string_arr10 );
	heap32_mfree( (obj)dup_string_arr1 );
	heap32_mfree( (obj)string_mean1 );
	heap32_mfree( (obj)string_median1 );
	heap32_mfree( (obj)string_mode1 );
	heap32_mfree( (obj)string_max0 );
	heap32_mfree( (obj)string_min0 );
	heap32_mfree( (obj)string_arr0_deviation );
	heap32_mfree( (obj)string_variance0 );
	heap32_mfree( (obj)string_sd0 );
	heap32_mfree( (obj)string_sd10 );
	heap32_mfree( (obj)string_covariance_0_10 );
	heap32_mfree( (obj)string_correlation_0_10 );
	heap32_mfree( (obj)string_gamma_halfinteger );
	heap32_mfree( (obj)string_gamma_halfinteger_negative );
	heap32_mfree( (obj)string_hypergeometric_halfinteger );
	heap32_mfree( (obj)string_cdf_t );
	heap32_mfree( (obj)string_standard_error );

	while(1) {

	}

	return EXIT_SUCCESS;
}
