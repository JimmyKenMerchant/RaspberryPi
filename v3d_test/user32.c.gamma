/**
 * user32.c
 *
 * Author: Kenta Ishii
 * License: MIT
 * License URL: https://opensource.org/licenses/MIT
 *
 */

#include "system32.h"
#include "system32.c"

extern obj DATA_V3D_BLENDER;
extern uint32 DATA_V3D_BLENDER_SIZE;

int32 _user_start() {
	_GPUMemory *dst_img;
	_GPUMemory *dst_z;
	_GPUMemory *src_img;
	_GPUMemory *src_z;
	_GPUMemory *uniforms1;
	_GPUMemory *uniforms2;
	_GPUMemory *uniforms3;
	_GPUMemory *uniforms4;
	_FragmentShader *fragmentshader;
	uint32 *jobs;
	uint32 result;

	_control_qpul2cache( 0b101 );
	_clear_qpucache( 0x0F0F0F0F );

	dst_img = (_GPUMemory*)heap32_malloc( _wordsizeof( _GPUMemory ) );
	_gpumemory_init( dst_img, 256, 16, 0xC );
	dst_z = (_GPUMemory*)heap32_malloc( _wordsizeof( _GPUMemory ) );
	_gpumemory_init( dst_z, 256, 16, 0xC );
	src_img = (_GPUMemory*)heap32_malloc( _wordsizeof( _GPUMemory ) );
	_gpumemory_init( src_img, 256, 16, 0xC );
	src_z = (_GPUMemory*)heap32_malloc( _wordsizeof( _GPUMemory ) );
	_gpumemory_init( src_z, 256, 16, 0xC );
	uniforms1 = (_GPUMemory*)heap32_malloc( _wordsizeof( _GPUMemory ) );
	_gpumemory_init( uniforms1, 32, 16, 0xC );
	uniforms2 = (_GPUMemory*)heap32_malloc( _wordsizeof( _GPUMemory ) );
	_gpumemory_init( uniforms2, 32, 16, 0xC );
	uniforms3 = (_GPUMemory*)heap32_malloc( _wordsizeof( _GPUMemory ) );
	_gpumemory_init( uniforms3, 32, 16, 0xC );
	uniforms4 = (_GPUMemory*)heap32_malloc( _wordsizeof( _GPUMemory ) );
	_gpumemory_init( uniforms4, 32, 16, 0xC );
	fragmentshader = (_FragmentShader*)heap32_malloc( _wordsizeof( _FragmentShader ) );
	_fragmentshader_init( fragmentshader, DATA_V3D_BLENDER, DATA_V3D_BLENDER_SIZE );

	dst_img->arm[0].u32 = 0xFF000000;
	dst_img->arm[1].u32 = 0xFF000001;
	dst_img->arm[2].u32 = 0xFF000002;
	dst_img->arm[3].u32 = 0xFF000003;
	dst_img->arm[4].u32 = 0xFF123456;
	dst_img->arm[5].u32 = 0xFF000005;
	dst_img->arm[6].u32 = 0xFF000006;
	dst_img->arm[7].u32 = 0xFF000007;
	dst_img->arm[8].u32 = 0xFF000008;
	dst_img->arm[9].u32 = 0xFF000009;
	dst_img->arm[10].u32 = 0xFF00000A;
	dst_img->arm[11].u32 = 0xFF00000B;
	dst_img->arm[12].u32 = 0xFF00000C;
	dst_img->arm[13].u32 = 0xFF00000D;
	dst_img->arm[14].u32 = 0xFF00000E;
	dst_img->arm[15].u32 = 0xFF00000F;
	dst_img->arm[16].u32 = 0xFF000010;
	dst_img->arm[17].u32 = 0xFF000011;
	dst_img->arm[18].u32 = 0xFF000012;
	dst_img->arm[19].u32 = 0xFF000013;
	dst_img->arm[20].u32 = 0xFF000014;
	dst_img->arm[21].u32 = 0xFF000015;
	dst_img->arm[22].u32 = 0xFF000016;
	dst_img->arm[23].u32 = 0xFF000017;
	dst_img->arm[24].u32 = 0xFF000018;
	dst_img->arm[25].u32 = 0xFF000019;
	dst_img->arm[26].u32 = 0xFF00001A;
	dst_img->arm[27].u32 = 0xFF00001B;
	dst_img->arm[28].u32 = 0xFF00001C;
	dst_img->arm[29].u32 = 0xFF00001D;
	dst_img->arm[30].u32 = 0xFF00001E;
	dst_img->arm[31].u32 = 0xFF00001F;
	dst_img->arm[32].u32 = 0xFF000020;
	dst_img->arm[33].u32 = 0xFF000021;
	dst_img->arm[34].u32 = 0xFF000022;
	dst_img->arm[35].u32 = 0xFF000023;
	dst_img->arm[36].u32 = 0xFF000024;
	dst_img->arm[37].u32 = 0xFF000025;
	dst_img->arm[38].u32 = 0xFF000026;
	dst_img->arm[39].u32 = 0xFF000027;
	dst_img->arm[40].u32 = 0xFF000028;
	dst_img->arm[41].u32 = 0xFF000029;
	dst_img->arm[42].u32 = 0xFF00002A;
	dst_img->arm[43].u32 = 0xFF00002B;
	dst_img->arm[44].u32 = 0xFF00002C;
	dst_img->arm[45].u32 = 0xFF00002D;
	dst_img->arm[46].u32 = 0xFF00002E;
	dst_img->arm[47].u32 = 0xFF00002F;
	dst_img->arm[48].u32 = 0xFF000030;
	dst_img->arm[49].u32 = 0xFF000031;
	dst_img->arm[50].u32 = 0xFF000032;
	dst_img->arm[51].u32 = 0xFF000033;
	dst_img->arm[52].u32 = 0xFF000034;
	dst_img->arm[53].u32 = 0xFF000035;
	dst_img->arm[54].u32 = 0xFF000036;
	dst_img->arm[55].u32 = 0xFF000037;
	dst_img->arm[56].u32 = 0xFF000038;
	dst_img->arm[57].u32 = 0xFF000039;
	dst_img->arm[58].u32 = 0xFF00003A;
	dst_img->arm[59].u32 = 0xFF00003B;
	dst_img->arm[60].u32 = 0xFF00003C;
	dst_img->arm[61].u32 = 0xFF00003D;
	dst_img->arm[62].u32 = 0xFF00003E;
	dst_img->arm[63].u32 = 0xFF00003F;

	dst_z->arm[0].u32 = 0x01;
	dst_z->arm[1].u32 = 0x01;
	dst_z->arm[2].u32 = 0x01;
	dst_z->arm[3].u32 = 0x01;
	dst_z->arm[4].u32 = 0x01;
	dst_z->arm[5].u32 = 0x01;
	dst_z->arm[6].u32 = 0x01;
	dst_z->arm[7].u32 = 0x01;
	dst_z->arm[8].u32 = 0x01;
	dst_z->arm[9].u32 = 0x01;
	dst_z->arm[10].u32 = 0x01;
	dst_z->arm[11].u32 = 0x01;
	dst_z->arm[12].u32 = 0x01;
	dst_z->arm[13].u32 = 0x01;
	dst_z->arm[14].u32 = 0x01;
	dst_z->arm[15].u32 = 0x01;
	dst_z->arm[16].u32 = 0x01;
	dst_z->arm[17].u32 = 0x01;
	dst_z->arm[18].u32 = 0x01;
	dst_z->arm[19].u32 = 0x01;
	dst_z->arm[20].u32 = 0x01;
	dst_z->arm[21].u32 = 0x01;
	dst_z->arm[22].u32 = 0x01;
	dst_z->arm[23].u32 = 0x01;
	dst_z->arm[24].u32 = 0x01;
	dst_z->arm[25].u32 = 0x01;
	dst_z->arm[26].u32 = 0x01;
	dst_z->arm[27].u32 = 0x01;
	dst_z->arm[28].u32 = 0x01;
	dst_z->arm[29].u32 = 0x01;
	dst_z->arm[30].u32 = 0x01;
	dst_z->arm[31].u32 = 0x01;
	dst_z->arm[32].u32 = 0x01;
	dst_z->arm[33].u32 = 0x01;
	dst_z->arm[34].u32 = 0x01;
	dst_z->arm[35].u32 = 0x01;
	dst_z->arm[36].u32 = 0x01;
	dst_z->arm[37].u32 = 0x01;
	dst_z->arm[38].u32 = 0x01;
	dst_z->arm[39].u32 = 0x01;
	dst_z->arm[40].u32 = 0x01;
	dst_z->arm[41].u32 = 0x01;
	dst_z->arm[42].u32 = 0x01;
	dst_z->arm[43].u32 = 0x01;
	dst_z->arm[44].u32 = 0x01;
	dst_z->arm[45].u32 = 0x01;
	dst_z->arm[46].u32 = 0x01;
	dst_z->arm[47].u32 = 0x01;
	dst_z->arm[48].u32 = 0x01;
	dst_z->arm[49].u32 = 0x01;
	dst_z->arm[50].u32 = 0x01;
	dst_z->arm[51].u32 = 0x01;
	dst_z->arm[52].u32 = 0x01;
	dst_z->arm[53].u32 = 0x01;
	dst_z->arm[54].u32 = 0x01;
	dst_z->arm[55].u32 = 0x01;
	dst_z->arm[56].u32 = 0x01;
	dst_z->arm[57].u32 = 0x01;
	dst_z->arm[58].u32 = 0x01;
	dst_z->arm[59].u32 = 0x01;
	dst_z->arm[60].u32 = 0x01;
	dst_z->arm[61].u32 = 0x01;
	dst_z->arm[62].u32 = 0x01;
	dst_z->arm[63].u32 = 0x01;

	src_img->arm[0].u32 = 0xFF000100;
	src_img->arm[1].u32 = 0xFF000101;
	src_img->arm[2].u32 = 0xFF000102;
	src_img->arm[3].u32 = 0xFF000103;
	src_img->arm[4].u32 = 0x80234567;
	src_img->arm[5].u32 = 0xFF000105;
	src_img->arm[6].u32 = 0xFF000106;
	src_img->arm[7].u32 = 0xFF000107;
	src_img->arm[8].u32 = 0xFF000108;
	src_img->arm[9].u32 = 0xFF000109;
	src_img->arm[10].u32 = 0xFF00010A;
	src_img->arm[11].u32 = 0xFF00010B;
	src_img->arm[12].u32 = 0xFF00010C;
	src_img->arm[13].u32 = 0xFF00010D;
	src_img->arm[14].u32 = 0xFF00010E;
	src_img->arm[15].u32 = 0xFF00010F;
	src_img->arm[16].u32 = 0xFF000110;
	src_img->arm[17].u32 = 0xFF000111;
	src_img->arm[18].u32 = 0xFF000112;
	src_img->arm[19].u32 = 0xFF000113;
	src_img->arm[20].u32 = 0xFF000114;
	src_img->arm[21].u32 = 0xFF000115;
	src_img->arm[22].u32 = 0xFF000116;
	src_img->arm[23].u32 = 0xFF000117;
	src_img->arm[24].u32 = 0xFF000118;
	src_img->arm[25].u32 = 0xFF000119;
	src_img->arm[26].u32 = 0xFF00011A;
	src_img->arm[27].u32 = 0xFF00011B;
	src_img->arm[28].u32 = 0xFF00011C;
	src_img->arm[29].u32 = 0xFF00011D;
	src_img->arm[30].u32 = 0xFF00011E;
	src_img->arm[31].u32 = 0xFF00011F;
	src_img->arm[32].u32 = 0xFF000120;
	src_img->arm[33].u32 = 0xFF000121;
	src_img->arm[34].u32 = 0xFF000122;
	src_img->arm[35].u32 = 0xFF000123;
	src_img->arm[36].u32 = 0xFF000124;
	src_img->arm[37].u32 = 0xFF000125;
	src_img->arm[38].u32 = 0xFF000126;
	src_img->arm[39].u32 = 0xFF000127;
	src_img->arm[40].u32 = 0xFF000128;
	src_img->arm[41].u32 = 0xFF000129;
	src_img->arm[42].u32 = 0xFF00012A;
	src_img->arm[43].u32 = 0xFF00012B;
	src_img->arm[44].u32 = 0xFF00012C;
	src_img->arm[45].u32 = 0xFF00012D;
	src_img->arm[46].u32 = 0xFF00012E;
	src_img->arm[47].u32 = 0xFF00012F;
	src_img->arm[48].u32 = 0xFF000130;
	src_img->arm[49].u32 = 0xFF000131;
	src_img->arm[50].u32 = 0xFF000132;
	src_img->arm[51].u32 = 0xFF000133;
	src_img->arm[52].u32 = 0xFF000134;
	src_img->arm[53].u32 = 0xFF000135;
	src_img->arm[54].u32 = 0xFF000136;
	src_img->arm[55].u32 = 0xFF000137;
	src_img->arm[56].u32 = 0xFF000138;
	src_img->arm[57].u32 = 0xFF000139;
	src_img->arm[58].u32 = 0xFF00013A;
	src_img->arm[59].u32 = 0xFF00013B;
	src_img->arm[60].u32 = 0xFF00013C;
	src_img->arm[61].u32 = 0xFF00013D;
	src_img->arm[62].u32 = 0xFF00013E;
	src_img->arm[63].u32 = 0xFF00013F;

	src_z->arm[0].u32 = 0x01;
	src_z->arm[1].u32 = 0x00;
	src_z->arm[2].u32 = 0x01;
	src_z->arm[3].u32 = 0x00;
	src_z->arm[4].u32 = 0x00;
	src_z->arm[5].u32 = 0x00;
	src_z->arm[6].u32 = 0x01;
	src_z->arm[7].u32 = 0x00;
	src_z->arm[8].u32 = 0x01;
	src_z->arm[9].u32 = 0x00;
	src_z->arm[10].u32 = 0x01;
	src_z->arm[11].u32 = 0x00;
	src_z->arm[12].u32 = 0x01;
	src_z->arm[13].u32 = 0x00;
	src_z->arm[14].u32 = 0x01;
	src_z->arm[15].u32 = 0x00;
	src_z->arm[16].u32 = 0x00;
	src_z->arm[17].u32 = 0x00;
	src_z->arm[18].u32 = 0x01;
	src_z->arm[19].u32 = 0x01;
	src_z->arm[20].u32 = 0x00;
	src_z->arm[21].u32 = 0x00;
	src_z->arm[22].u32 = 0x01;
	src_z->arm[23].u32 = 0x01;
	src_z->arm[24].u32 = 0x00;
	src_z->arm[25].u32 = 0x00;
	src_z->arm[26].u32 = 0x01;
	src_z->arm[27].u32 = 0x01;
	src_z->arm[28].u32 = 0x00;
	src_z->arm[29].u32 = 0x00;
	src_z->arm[30].u32 = 0x01;
	src_z->arm[31].u32 = 0x01;
	src_z->arm[32].u32 = 0x01;
	src_z->arm[33].u32 = 0x01;
	src_z->arm[34].u32 = 0x01;
	src_z->arm[35].u32 = 0x00;
	src_z->arm[36].u32 = 0x01;
	src_z->arm[37].u32 = 0x01;
	src_z->arm[38].u32 = 0x01;
	src_z->arm[39].u32 = 0x00;
	src_z->arm[40].u32 = 0x01;
	src_z->arm[41].u32 = 0x01;
	src_z->arm[42].u32 = 0x01;
	src_z->arm[43].u32 = 0x00;
	src_z->arm[44].u32 = 0x01;
	src_z->arm[45].u32 = 0x01;
	src_z->arm[46].u32 = 0x01;
	src_z->arm[47].u32 = 0x00;
	src_z->arm[48].u32 = 0x01;
	src_z->arm[49].u32 = 0x00;
	src_z->arm[50].u32 = 0x00;
	src_z->arm[51].u32 = 0x00;
	src_z->arm[52].u32 = 0x01;
	src_z->arm[53].u32 = 0x00;
	src_z->arm[54].u32 = 0x00;
	src_z->arm[55].u32 = 0x00;
	src_z->arm[56].u32 = 0x01;
	src_z->arm[57].u32 = 0x00;
	src_z->arm[58].u32 = 0x00;
	src_z->arm[59].u32 = 0x00;
	src_z->arm[60].u32 = 0x01;
	src_z->arm[61].u32 = 0x00;
	src_z->arm[62].u32 = 0x00;
	src_z->arm[63].u32 = 0x00;

	uniforms1->arm[0].u32 = dst_img->gpu;
	uniforms1->arm[1].u32 = dst_z->gpu;
	uniforms1->arm[2].u32 = src_img->gpu;
	uniforms1->arm[3].u32 = src_z->gpu;
	uniforms1->arm[4].u32 = 1;
	uniforms1->arm[5].u32 = 1;
	uniforms1->arm[6].u32 = 0;
	uniforms1->arm[7].u32 = 0;
	uniforms2->arm[0].u32 = dst_img->gpu + 64;
	uniforms2->arm[1].u32 = dst_z->gpu + 64;
	uniforms2->arm[2].u32 = src_img->gpu + 64;
	uniforms2->arm[3].u32 = src_z->gpu + 64;
	uniforms2->arm[4].u32 = 1;
	uniforms2->arm[5].u32 = 1;
	uniforms2->arm[6].u32 = 0;
	uniforms2->arm[7].u32 = 0;
	uniforms3->arm[0].u32 = dst_img->gpu + 128;
	uniforms3->arm[1].u32 = dst_z->gpu + 128;
	uniforms3->arm[2].u32 = src_img->gpu + 128;
	uniforms3->arm[3].u32 = src_z->gpu + 128;
	uniforms3->arm[4].u32 = 1;
	uniforms3->arm[5].u32 = 1;
	uniforms3->arm[6].u32 = 0;
	uniforms3->arm[7].u32 = 0;
	uniforms4->arm[0].u32 = dst_img->gpu + 192;
	uniforms4->arm[1].u32 = dst_z->gpu + 192;
	uniforms4->arm[2].u32 = src_img->gpu + 192;
	uniforms4->arm[3].u32 = src_z->gpu + 192;
	uniforms4->arm[4].u32 = 1;
	uniforms4->arm[5].u32 = 1;
	uniforms4->arm[6].u32 = 0;
	uniforms4->arm[7].u32 = 0;
	jobs = (uint32*)heap32_malloc( 8 );
	jobs[0] = uniforms1->gpu;
	jobs[1] = fragmentshader->gpu;
	jobs[2] = uniforms2->gpu;
	jobs[3] = fragmentshader->gpu;
	jobs[4] = uniforms3->gpu;
	jobs[5] = fragmentshader->gpu;
	jobs[6] = uniforms4->gpu;
	jobs[7] = fragmentshader->gpu;
	result = _execute_qpu( 4, jobs, false, 0xFF0000 );

print32_debug( result, 0, 0 );
print32_debug_hexa( (obj)dst_img->arm, 0, 12, 256 );
print32_debug_hexa( (obj)dst_z->arm, 0, 256, 256 );

	result = _gpumemory_free( dst_img );
print32_debug( result, 0, 500 );
	result = _gpumemory_free( dst_z );
print32_debug( result, 0, 512 );
	result = _gpumemory_free( src_img );
print32_debug( result, 0, 524 );
	result = _gpumemory_free( src_z );
print32_debug( result, 0, 536 );
	result = _gpumemory_free( uniforms1 );
print32_debug( result, 0, 548 );
	result = _gpumemory_free( uniforms2 );
print32_debug( result, 0, 560 );
	result = _gpumemory_free( uniforms3 );
print32_debug( result, 0, 572 );
	result = _gpumemory_free( uniforms4 );
print32_debug( result, 0, 584 );
	result = _fragmentshader_free( fragmentshader );
print32_debug( result, 0, 596 );

	while( true ) {
	}
	return EXIT_SUCCESS;
}

