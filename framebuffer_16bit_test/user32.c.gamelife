/**
 * user32.c
 *
 * Author: Kenta Ishii
 * License: MIT
 * License URL: https://opensource.org/licenses/MIT
 *
 */

#include "system32.h"
#include "system32.c"

void binary_random( uchar8* array, uint32 array_size );
void print_life( uchar8* life, uint32 life_height, uint32 life_width );

uint32 life_height = 32; // Multiply of 4
uint32 life_width = 32;
uint32 life_size;
bool life_switch = true;

int32 _user_start()
{

	life_size = arm32_mul( life_height,life_width );
	uchar8* life1 = (uchar8*)heap32_malloc( life_size >> 2 ); // One Unit of This Malloc is One Word (4 Bytes)
	uchar8* life2 = (uchar8*)heap32_malloc( life_size >> 2 ); // One Unit of This Malloc is One Word (4 Bytes)

	binary_random( life1, life_size );
	binary_random( life2, life_size );

//print32_debug_hexa( (uint32)life1, 0, 0, life_size );
//print32_debug_hexa( (uint32)life2, 0, 300, life_size );

	print_life( life1, life_height, life_width );

	while(1) {
		if ( life_switch ) {
			print_life( life1, life_height, life_width );
			life_switch = false;
		} else {
			print_life( life2, life_height, life_width );
			life_switch = true;
		}
		_sleep( 500000 );
	}

	return EXIT_SUCCESS;
}

void binary_random( uchar8* array, uint32 array_size ) {
//print32_debug( (uint32)array, 0, 100 );
//print32_debug( (uint32)array_size, 0, 112 );
	for ( uint32 i = 0; i < array_size; i++ ) {
		if ( _random( 255 ) > 127) {
			array[i] = 0xFF;
		} else {
			array[i] = 0x00;
		}
//print32_debug( i, 0, 124 );
		arm32_dsb();
		arm32_isb();
	}
}

void print_life( uchar8* life, uint32 life_height, uint32 life_width ) {
	uint32 offset_vertical = 0;
	print32_set_caret( print32_string( "\x1B[H\0", FB32_X_CARET, FB32_Y_CARET, 3 ) ); // Cursor to Upper Left Corner
	for ( uint32 i = 0; i < life_height; i++ ) {
		for ( uint32 j = 0; j < life_width; j++ ) {
			print32_set_caret( print32_number( (uint32)(life[offset_vertical+j]<<24), FB32_X_CARET, FB32_Y_CARET, 2 ) );
			arm32_dsb();
			arm32_isb();
		}
		print32_set_caret( print32_string( "\n\0", FB32_X_CARET, FB32_Y_CARET, 1 ) );
		offset_vertical += life_width;
	}

}
